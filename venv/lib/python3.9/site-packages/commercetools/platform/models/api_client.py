# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType

__all__ = ["ApiClient", "ApiClientDraft", "ApiClientPagedQueryResponse"]


class ApiClient(_BaseType):
    #: The OAuth2 `client_id` that can be used to [obtain an access token](/../api/authorization#requesting-an-access-token-using-the-composable-commerce-oauth-20-service).
    id: str
    #: Name of the APIClient.
    name: str
    #: Whitespace-separated list of [OAuth scopes](/../api/scopes) that can be used when [obtaining an access token](/../api/authorization#requesting-an-access-token-using-the-composable-commerce-oauth-20-service).
    scope: str
    #: Only shown once in the response of creating the APIClient.
    #: This is the OAuth2 `client_secret` that can be used to [obtain an access token](/../api/authorization#requesting-an-access-token-using-the-composable-commerce-oauth-20-service).
    secret: typing.Optional[str]
    #: Date of the last day this APIClient was used to [obtain an access token](/../api/authorization#requesting-an-access-token-using-the-composable-commerce-oauth-20-service).
    last_used_at: typing.Optional[datetime.date]
    #: If set, the Client will be deleted on (or shortly after) this point in time.
    delete_at: typing.Optional[datetime.datetime]
    #: Date and time (UTC) the APIClient was initially created at.
    created_at: typing.Optional[datetime.datetime]
    #: Expiration time in seconds for each access token obtained by the APIClient. Only present when set with the [APIClientDraft](ctp:api:type:ApiClientDraft). If not present the default value applies.
    access_token_validity_seconds: typing.Optional[int]
    #: Inactivity expiration time in seconds for each refresh token obtained by the APIClient. Only present when set with the [APIClientDraft](ctp:api:type:ApiClientDraft). If not present the default value applies.
    refresh_token_validity_seconds: typing.Optional[int]

    def __init__(
        self,
        *,
        id: str,
        name: str,
        scope: str,
        secret: typing.Optional[str] = None,
        last_used_at: typing.Optional[datetime.date] = None,
        delete_at: typing.Optional[datetime.datetime] = None,
        created_at: typing.Optional[datetime.datetime] = None,
        access_token_validity_seconds: typing.Optional[int] = None,
        refresh_token_validity_seconds: typing.Optional[int] = None
    ):
        self.id = id
        self.name = name
        self.scope = scope
        self.secret = secret
        self.last_used_at = last_used_at
        self.delete_at = delete_at
        self.created_at = created_at
        self.access_token_validity_seconds = access_token_validity_seconds
        self.refresh_token_validity_seconds = refresh_token_validity_seconds

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApiClient":
        from ._schemas.api_client import ApiClientSchema

        return ApiClientSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.api_client import ApiClientSchema

        return ApiClientSchema().dump(self)


class ApiClientDraft(_BaseType):
    #: Name of the APIClient.
    name: str
    #: Whitespace-separated list of [OAuth scopes](/../api/scopes) that can be used when [obtaining an access token](/../api/authorization#requesting-an-access-token-using-the-composable-commerce-oauth-20-service).
    scope: str
    #: If set, the Client will be deleted after the specified amount of days.
    delete_days_after_creation: typing.Optional[int]
    #: Expiration time in seconds for each access token obtained by the APIClient. If not set the default value applies.
    access_token_validity_seconds: typing.Optional[int]
    #: Inactivity expiration time in seconds for each refresh token obtained by the APIClient. The expiration time for refresh tokens is restarted each time the token is used. If not set the default value applies.
    refresh_token_validity_seconds: typing.Optional[int]

    def __init__(
        self,
        *,
        name: str,
        scope: str,
        delete_days_after_creation: typing.Optional[int] = None,
        access_token_validity_seconds: typing.Optional[int] = None,
        refresh_token_validity_seconds: typing.Optional[int] = None
    ):
        self.name = name
        self.scope = scope
        self.delete_days_after_creation = delete_days_after_creation
        self.access_token_validity_seconds = access_token_validity_seconds
        self.refresh_token_validity_seconds = refresh_token_validity_seconds

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ApiClientDraft":
        from ._schemas.api_client import ApiClientDraftSchema

        return ApiClientDraftSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.api_client import ApiClientDraftSchema

        return ApiClientDraftSchema().dump(self)


class ApiClientPagedQueryResponse(_BaseType):
    """[PagedQueryResult](/general-concepts#pagedqueryresult) with `results` containing an array of [APIClient](ctp:api:type:ApiClient)."""

    #: Number of [results requested](/../api/general-concepts#limit).
    limit: int
    #: Number of [elements skipped](/../api/general-concepts#offset).
    offset: int
    #: Actual number of results returned.
    count: int
    #: Total number of results matching the query.
    #: This number is an estimation that is not [strongly consistent](/../api/general-concepts#strong-consistency).
    #: This field is returned by default.
    #: For improved performance, calculating this field can be deactivated by using the query parameter `withTotal=false`.
    #: When the results are filtered with a [Query Predicate](/../api/predicates/query), `total` is subject to a [limit](/../api/limits#queries).
    total: typing.Optional[int]
    #: APIClients matching the query.
    results: typing.List["ApiClient"]

    def __init__(
        self,
        *,
        limit: int,
        offset: int,
        count: int,
        total: typing.Optional[int] = None,
        results: typing.List["ApiClient"]
    ):
        self.limit = limit
        self.offset = offset
        self.count = count
        self.total = total
        self.results = results

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ApiClientPagedQueryResponse":
        from ._schemas.api_client import ApiClientPagedQueryResponseSchema

        return ApiClientPagedQueryResponseSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.api_client import ApiClientPagedQueryResponseSchema

        return ApiClientPagedQueryResponseSchema().dump(self)
