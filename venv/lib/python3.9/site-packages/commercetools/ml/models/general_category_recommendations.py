# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType

__all__ = [
    "GeneralCategoryRecommendation",
    "GeneralCategoryRecommendationPagedQueryResponse",
]


class GeneralCategoryRecommendation(_BaseType):
    #: An English category name that is recommended for a product.
    category_name: str
    #: Probability score for the category recommendation.
    confidence: float

    def __init__(self, *, category_name: str, confidence: float):
        self.category_name = category_name
        self.confidence = confidence

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "GeneralCategoryRecommendation":
        from ._schemas.general_category_recommendations import (
            GeneralCategoryRecommendationSchema,
        )

        return GeneralCategoryRecommendationSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.general_category_recommendations import (
            GeneralCategoryRecommendationSchema,
        )

        return GeneralCategoryRecommendationSchema().dump(self)


class GeneralCategoryRecommendationPagedQueryResponse(_BaseType):
    count: int
    total: int
    #: Number of [elements skipped](/../api/general-concepts#offset).
    offset: int
    results: typing.List["GeneralCategoryRecommendation"]

    def __init__(
        self,
        *,
        count: int,
        total: int,
        offset: int,
        results: typing.List["GeneralCategoryRecommendation"]
    ):
        self.count = count
        self.total = total
        self.offset = offset
        self.results = results

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "GeneralCategoryRecommendationPagedQueryResponse":
        from ._schemas.general_category_recommendations import (
            GeneralCategoryRecommendationPagedQueryResponseSchema,
        )

        return GeneralCategoryRecommendationPagedQueryResponseSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.general_category_recommendations import (
            GeneralCategoryRecommendationPagedQueryResponseSchema,
        )

        return GeneralCategoryRecommendationPagedQueryResponseSchema().dump(self)
